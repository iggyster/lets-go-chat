// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	user "github.com/iggyster/lets-go-chat/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// FindActivated provides a mock function with given fields:
func (_m *UserRepo) FindActivated() []*user.User {
	ret := _m.Called()

	var r0 []*user.User
	if rf, ok := ret.Get(0).(func() []*user.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.User)
		}
	}

	return r0
}

// FindByToken provides a mock function with given fields: toekn
func (_m *UserRepo) FindByToken(toekn string) *user.User {
	ret := _m.Called(toekn)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(toekn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	return r0
}

// FindByUsername provides a mock function with given fields: username
func (_m *UserRepo) FindByUsername(username string) (*user.User, error) {
	ret := _m.Called(username)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExists provides a mock function with given fields: username
func (_m *UserRepo) IsExists(username string) bool {
	ret := _m.Called(username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *UserRepo) Save(_a0 *user.User) {
	_m.Called(_a0)
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
